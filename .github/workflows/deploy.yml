name: Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      image_tag:
        description: 'Image tag to deploy'
        required: false
        default: 'latest'
        type: string
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      environment: ${{ steps.environment.outputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine environment
      id: environment
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate image reference
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ needs.build.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Create namespace if it doesn't exist
      run: |
        kubectl create namespace homecare-${{ needs.build.outputs.environment }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        cd k8s/overlays/${{ needs.build.outputs.environment }}
        kubectl kustomize . | sed "s|homecare-app:.*|${{ needs.build.outputs.image }}|g" | kubectl apply -f -

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/homecare-app -n homecare-${{ needs.build.outputs.environment }} --timeout=300s

    - name: Get deployment status
      run: |
        kubectl get pods -n homecare-${{ needs.build.outputs.environment }} -l app=homecare-app
        kubectl get svc -n homecare-${{ needs.build.outputs.environment }}
        kubectl get ingress -n homecare-${{ needs.build.outputs.environment }}
