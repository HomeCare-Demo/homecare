#!/bin/bash

#################################################
# HomeCare Project Bootstrap Script
#################################################
# This script sets up all necessary development dependencies
# for the HomeCare project on macOS and Ubuntu systems.
#
# The script will install:
# - Node.js (version 20.x LTS)
# - Docker & Docker Compose
# - Kubernetes tools (kubectl, kustomize)
# - Azure CLI
# - Terraform (version 1.9+)
# - Project dependencies via npm
#
# Usage:
#   ./scripts/bootstrap
#
# Or make it executable first:
#   chmod +x scripts/bootstrap && ./scripts/bootstrap
#################################################

set -e  # Exit on any error
set -u  # Exit on undefined variable

# Color codes for output formatting
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Required versions
readonly NODE_VERSION="20"
readonly TERRAFORM_MIN_VERSION="1.9.0"
readonly KUBECTL_MIN_VERSION="1.28.0"

#################################################
# Utility Functions
#################################################

# Print colored output messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Compare version numbers (returns 0 if $1 >= $2)
version_gte() {
    printf '%s\n%s\n' "$2" "$1" | sort -V -C
}

# Detect the operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command_exists apt-get; then
            echo "ubuntu"
        else
            log_error "This script currently supports Ubuntu/Debian-based Linux distributions only"
            exit 1
        fi
    else
        log_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
}

#################################################
# System Package Managers
#################################################

# Install Homebrew on macOS if not present
install_homebrew() {
    if ! command_exists brew; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ -f "/opt/homebrew/bin/brew" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        
        log_success "Homebrew installed successfully"
    else
        log_info "Homebrew is already installed, updating..."
        brew update
    fi
}

# Update package lists on Ubuntu
update_ubuntu_packages() {
    log_info "Updating package lists..."
    sudo apt-get update
}

#################################################
# Node.js Installation
#################################################

install_nodejs() {
    local os="$1"
    
    # Check if Node.js is already installed with correct version
    if command_exists node; then
        local current_version
        current_version=$(node --version | sed 's/v//' | cut -d. -f1)
        if [[ "$current_version" -ge "$NODE_VERSION" ]]; then
            log_success "Node.js v$current_version is already installed (>= v$NODE_VERSION required)"
            return 0
        else
            log_info "Node.js v$current_version is installed, but we need v$NODE_VERSION+. Skipping to avoid downgrade."
            log_warning "Consider updating Node.js manually if needed: brew upgrade node (macOS) or check official docs"
            return 0
        fi
    fi
    
    log_info "Installing Node.js v$NODE_VERSION..."
    
    case "$os" in
        "macos")
            # Use Homebrew to install Node.js
            brew install node@$NODE_VERSION
            # Link the specific version
            brew link --force node@$NODE_VERSION
            ;;
        "ubuntu")
            # Install Node.js using NodeSource repository for better version control
            curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo -E bash -
            sudo apt-get install -y nodejs
            ;;
    esac
    
    # Verify installation
    if command_exists node && command_exists npm; then
        log_success "Node.js $(node --version) and npm $(npm --version) installed successfully"
    else
        log_error "Failed to install Node.js"
        exit 1
    fi
}

#################################################
# Docker Installation
#################################################

install_docker() {
    local os="$1"
    
    # Check if Docker is already installed
    if command_exists docker; then
        log_success "Docker is already installed: $(docker --version)"
        
        # Check if Docker Compose is available
        if docker compose version >/dev/null 2>&1 || command_exists docker-compose; then
            log_success "Docker Compose is available"
            return 0
        fi
    fi
    
    log_info "Installing Docker and Docker Compose..."
    
    case "$os" in
        "macos")
            # On macOS, recommend Docker Desktop
            if ! command_exists docker; then
                log_info "Installing Docker via Homebrew..."
                brew install --cask docker
                log_warning "Docker Desktop has been installed. Please start Docker Desktop manually before proceeding."
                log_warning "You can find Docker Desktop in your Applications folder."
                read -p "Press Enter after starting Docker Desktop..."
            fi
            ;;
        "ubuntu")
            # Only install Docker if it's not already present
            if ! command_exists docker; then
                log_info "Installing Docker using the official Docker repository..."
                
                # Install prerequisites
                sudo apt-get install -y \
                    apt-transport-https \
                    ca-certificates \
                    curl \
                    gnupg \
                    lsb-release
                
                # Add Docker's official GPG key
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                
                # Add Docker repository
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                
                # Update package list and install Docker
                sudo apt-get update
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                
                # Add current user to docker group to avoid sudo requirement
                sudo usermod -aG docker "$USER"
                log_warning "Added $USER to docker group. You may need to log out and back in for this to take effect."
            else
                log_info "Docker is already installed, skipping installation"
            fi
            ;;
    esac
    
    # Verify Docker installation
    if command_exists docker; then
        log_success "Docker installed successfully: $(docker --version)"
        
        # Test Docker Compose
        if docker compose version >/dev/null 2>&1; then
            log_success "Docker Compose is available: $(docker compose version)"
        elif command_exists docker-compose; then
            log_success "Docker Compose is available: $(docker-compose --version)"
        else
            log_warning "Docker Compose may not be properly installed"
        fi
    else
        log_error "Failed to install Docker"
        exit 1
    fi
}

#################################################
# Kubernetes Tools Installation
#################################################

install_kubectl() {
    local os="$1"
    
    # Check if kubectl is already installed with acceptable version
    if command_exists kubectl; then
        local current_version
        # Try multiple methods to get kubectl version
        current_version=$(kubectl version --client -o yaml 2>/dev/null | grep gitVersion | head -1 | sed 's/.*gitVersion: v//' || \
                         kubectl version --client --short 2>/dev/null | grep "Client Version" | sed 's/.*v//' || \
                         kubectl version --client 2>/dev/null | grep "Client Version" | grep -o 'v[0-9.]*' | sed 's/v//' || \
                         echo "0.0.0")
        
        if version_gte "$current_version" "$KUBECTL_MIN_VERSION"; then
            log_success "kubectl v$current_version is already installed (>= v$KUBECTL_MIN_VERSION required)"
            return 0
        else
            log_info "kubectl v$current_version is installed, but we need v$KUBECTL_MIN_VERSION+. Skipping to avoid downgrade."
            log_warning "Consider updating kubectl manually if needed: brew upgrade kubectl (macOS) or check official docs"
            return 0
        fi
    fi
    
    log_info "Installing kubectl..."
    
    case "$os" in
        "macos")
            brew install kubectl
            ;;
        "ubuntu")
            # Install kubectl using the official Kubernetes repository
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
            ;;
    esac
    
    # Verify installation
    if command_exists kubectl; then
        log_success "kubectl installed successfully: $(kubectl version --client --short 2>/dev/null || kubectl version --client)"
    else
        log_error "Failed to install kubectl"
        exit 1
    fi
}

install_kustomize() {
    local os="$1"
    
    # Check if kustomize is already installed
    if command_exists kustomize; then
        local current_version
        # Try multiple methods to get kustomize version
        current_version=$(kustomize version --short 2>/dev/null | grep -o 'v[0-9.]*' | sed 's/v//' || \
                         kustomize version 2>/dev/null | grep -o 'Version:[^}]*' | grep -o 'v[0-9.]*' | sed 's/v//' || \
                         echo "0.0.0")
        
        log_success "kustomize v$current_version is already installed"
        return 0
    fi
    
    log_info "Installing kustomize..."
    
    case "$os" in
        "macos")
            brew install kustomize
            ;;
        "ubuntu")
            # Install kustomize using the official installation script
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
            ;;
    esac
    
    # Verify installation
    if command_exists kustomize; then
        log_success "kustomize installed successfully: $(kustomize version --short 2>/dev/null || kustomize version)"
    else
        log_error "Failed to install kustomize"
        exit 1
    fi
}

#################################################
# Azure CLI Installation
#################################################

install_azure_cli() {
    local os="$1"
    
    # Check if Azure CLI is already installed
    if command_exists az; then
        log_success "Azure CLI is already installed: $(az version --output tsv --query '\"azure-cli\"' 2>/dev/null || az --version | head -1)"
        return 0
    fi
    
    log_info "Installing Azure CLI..."
    
    case "$os" in
        "macos")
            brew install azure-cli
            ;;
        "ubuntu")
            # Install Azure CLI using Microsoft's repository
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            ;;
    esac
    
    # Verify installation
    if command_exists az; then
        log_success "Azure CLI installed successfully: $(az version --output tsv --query '\"azure-cli\"' 2>/dev/null || az --version | head -1)"
    else
        log_error "Failed to install Azure CLI"
        exit 1
    fi
}

#################################################
# Terraform Installation
#################################################

install_terraform() {
    local os="$1"
    
    # Check if Terraform is already installed with acceptable version
    if command_exists terraform; then
        local current_version
        # Try multiple methods to get terraform version
        current_version=$(terraform version -json 2>/dev/null | grep -o '"terraform_version":"[^"]*' | cut -d'"' -f4 || \
                         terraform --version 2>/dev/null | head -1 | grep -o 'v[0-9.]*' | sed 's/v//' || \
                         terraform version 2>/dev/null | head -1 | grep -o '[0-9.]*' || \
                         echo "0.0.0")
        
        if version_gte "$current_version" "$TERRAFORM_MIN_VERSION"; then
            log_success "Terraform v$current_version is already installed (>= v$TERRAFORM_MIN_VERSION required)"
            return 0
        else
            log_info "Terraform v$current_version is installed, but we need v$TERRAFORM_MIN_VERSION+. Skipping to avoid downgrade."
            log_warning "Consider updating Terraform manually if needed: brew upgrade terraform (macOS) or check official docs"
            return 0
        fi
    fi
    
    log_info "Installing Terraform..."
    
    case "$os" in
        "macos")
            brew tap hashicorp/tap
            brew install hashicorp/tap/terraform
            ;;
        "ubuntu")
            # Install Terraform using HashiCorp's repository
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update
            sudo apt-get install -y terraform
            ;;
    esac
    
    # Verify installation
    if command_exists terraform; then
        log_success "Terraform installed successfully: $(terraform --version | head -1)"
    else
        log_error "Failed to install Terraform"
        exit 1
    fi
}

#################################################
# Project Dependencies Installation
#################################################

install_project_dependencies() {
    log_info "Installing project dependencies with npm..."
    
    # Ensure we're in the project root directory
    if [[ ! -f "package.json" ]]; then
        log_error "package.json not found. Please run this script from the project root directory."
        exit 1
    fi
    
    # Install Node.js dependencies
    npm install
    
    log_success "Project dependencies installed successfully"
}

#################################################
# Post-Installation Verification
#################################################

verify_installations() {
    log_info "Verifying all installations..."
    
    local all_good=true
    
    # Check Node.js
    if command_exists node && command_exists npm; then
        log_success "✓ Node.js: $(node --version), npm: $(npm --version)"
    else
        log_error "✗ Node.js or npm not found"
        all_good=false
    fi
    
    # Check Docker
    if command_exists docker; then
        log_success "✓ Docker: $(docker --version)"
        if docker compose version >/dev/null 2>&1; then
            log_success "✓ Docker Compose: $(docker compose version)"
        elif command_exists docker-compose; then
            log_success "✓ Docker Compose: $(docker-compose --version)"
        else
            log_warning "⚠ Docker Compose not found"
        fi
    else
        log_error "✗ Docker not found"
        all_good=false
    fi
    
    # Check kubectl
    if command_exists kubectl; then
        local kubectl_version
        kubectl_version=$(kubectl version --client -o yaml 2>/dev/null | grep gitVersion | head -1 | sed 's/.*gitVersion: v//' || \
                         kubectl version --client --short 2>/dev/null | grep "Client Version" | sed 's/.*v//' || \
                         kubectl version --client 2>/dev/null | grep "Client Version" | grep -o 'v[0-9.]*' | sed 's/v//' || \
                         echo "unknown")
        log_success "✓ kubectl: v$kubectl_version"
    else
        log_error "✗ kubectl not found"
        all_good=false
    fi
    
    # Check kustomize
    if command_exists kustomize; then
        local kustomize_version
        kustomize_version=$(kustomize version --short 2>/dev/null | grep -o 'v[0-9.]*' | sed 's/v//' || \
                           kustomize version 2>/dev/null | grep -o 'Version:[^}]*' | grep -o 'v[0-9.]*' | sed 's/v//' || \
                           echo "unknown")
        log_success "✓ kustomize: v$kustomize_version"
    else
        log_error "✗ kustomize not found"
        all_good=false
    fi
    
    # Check Azure CLI
    if command_exists az; then
        local az_version
        az_version=$(az version --output tsv --query '"azure-cli"' 2>/dev/null || \
                    az --version 2>/dev/null | head -1 | grep -o '[0-9.]*' || \
                    echo "unknown")
        log_success "✓ Azure CLI: v$az_version"
    else
        log_error "✗ Azure CLI not found"
        all_good=false
    fi
    
    # Check Terraform
    if command_exists terraform; then
        local terraform_version
        terraform_version=$(terraform version -json 2>/dev/null | grep -o '"terraform_version":"[^"]*' | cut -d'"' -f4 || \
                           terraform --version 2>/dev/null | head -1 | grep -o 'v[0-9.]*' | sed 's/v//' || \
                           terraform version 2>/dev/null | head -1 | grep -o '[0-9.]*' || \
                           echo "unknown")
        log_success "✓ Terraform: v$terraform_version"
    else
        log_error "✗ Terraform not found"
        all_good=false
    fi
    
    if [[ "$all_good" == true ]]; then
        log_success "All tools are properly installed and ready to use!"
    else
        log_error "Some tools failed to install. Please check the errors above."
        exit 1
    fi
}

#################################################
# Post-Installation Instructions
#################################################

show_next_steps() {
    echo
    log_info "🎉 Bootstrap completed successfully!"
    echo
    log_info "Next steps:"
    echo "  1. Start development server:"
    echo "     npm run dev"
    echo
    echo "  2. Build the project:"
    echo "     npm run build"
    echo
    echo "  3. Set up Azure infrastructure (if needed):"
    echo "     cd terraform"
    echo "     terraform init"
    echo "     terraform plan"
    echo
    echo "  4. Deploy to Kubernetes (if needed):"
    echo "     kubectl apply -k k8s/overlays/dev"
    echo
    log_info "For more information, check the documentation in the docs/ directory."
    echo
}

#################################################
# Main Execution
#################################################

main() {
    log_info "🚀 Starting HomeCare project bootstrap..."
    
    # Detect operating system
    local os
    os=$(detect_os)
    log_info "Detected operating system: $os"
    
    # Install system package manager (if needed)
    case "$os" in
        "macos")
            install_homebrew
            ;;
        "ubuntu")
            update_ubuntu_packages
            ;;
    esac
    
    # Install all required tools
    install_nodejs "$os"
    install_docker "$os"
    install_kubectl "$os"
    install_kustomize "$os"
    install_azure_cli "$os"
    install_terraform "$os"
    
    # Install project dependencies
    install_project_dependencies
    
    # Verify everything is working
    verify_installations
    
    # Show next steps
    show_next_steps
}

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
